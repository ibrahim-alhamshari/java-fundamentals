 /*
  * This Groovy source file was generated by the Gradle 'init' task.
  */

 package basiclibrary;

 import java.io.File;
 import java.io.FileNotFoundException;
 import java.util.*;

 public class App {
     static String getGreeting() {
         return "Hello world.";
     }

     public static void main(String[] args)  {


         System.out.println(getGreeting());
         System.out.println("");
         int n = 3;
         int[] newArray2 ={1,2,7,4,8};

         // Daily average temperatures for Seattle, October 1-28 2017
         int[][] weeklyMonthTemperatures = {
                 {66, 64, 58, 65, 71, 57, 60},
                 {57, 65, 65, 70, 72, 65, 51},
                 {55, 54, 60, 53, 59, 57, 61},
                 {65, 56, 55, 52, 55, 62, 57}
         };


         System.out.println("roll: "+Arrays.toString(roll(n)));
         System.out.println("true or false?  " + containsDuplicates(newArray2));
         System.out.println("average:  "+averages(newArray2));
         System.out.println("arrayOfArrays: " +Arrays.toString(arrayOfArrays(weeklyMonthTemperatures)));

         weatherData(weeklyMonthTemperatures);

         List<String> votes = new ArrayList<>();
         votes.add("Bush");
         votes.add("Bush");
         votes.add("Bush");
         votes.add("Shrub");
         votes.add("Hedge");
         votes.add("Shrub");
         votes.add("Bush");
         votes.add("Hedge");
         votes.add("Bush");

         String winner = tally(votes);
         System.out.println(winner + " received the most votes!");

     }
     //*******************************************************************
     public static String tally(List arr) {

         // Create HashMap to store word and it's frequency
         HashMap<String, Integer> names = new HashMap<String, Integer>();

         // Iterate through array of words
         for (int i = 0; i < arr.size(); i++) {
             // If word already exist in HashMap then increase it's count by 1
             if (names.containsKey(arr.get(i))) {
                 names.put((String) arr.get(i), names.get(arr.get(i)) + 1);
             }
             // Otherwise add word to HashMap
             else {
                 names.put((String) arr.get(i), 1);
             }
         }

         // Create set to iterate over HashMap
         Set<Map.Entry<String, Integer> > set = names.entrySet();
         String key = "";
         int value = 0;

         for (Map.Entry<String, Integer> me : set) {
             // Check for word having highest frequency
             if (me.getValue() > value) {
                 value = me.getValue();
                 key = me.getKey();
             }
         }

         // Return word having highest frequency
         return key;
     }
     //*******************************************************
        public static List<String> weatherData(int[][] arr){
            Set<Integer> set = new HashSet<Integer>();
            int minValue=arr[0][0];
            int maximumValue=arr[0][0];
            for (int i=0 ;i< arr.length;i++){
                for (int x=0;x< arr[i].length;x++){
                    if(minValue>arr[i][x]){
                        minValue=arr[i][x];
                    }else if(maximumValue<arr[i][x]){
                        maximumValue=arr[i][x];
                    }

                    set.add(arr[i][x]);
                }
            }
            System.out.println("High: " +maximumValue);
            System.out.println("Low: "+minValue);

            List<Integer> list = new ArrayList<Integer>(set);
            Collections.sort(list);

            int currentValue = list.get(0);//51
            List<String> stringArray = new ArrayList<String>();
             for(int i=0; i<list.size();i++){
             if(list.get(i) != currentValue){//51, 52, 54
                 for(int j=currentValue; j < list.get(i);j++){
                     String str= "Never saw temperature: " + j;
                     stringArray.add(str);
                     System.out.println("Never saw temperature: " + j);
                 }
             }
                 currentValue = list.get(i)+1; //63
            }
//            System.out.println("======================="+(stringArray));
            return stringArray;
            }
     // ********************************************************
     public static int[] roll(int n) {
         int max = 6;
         int min = 1;
         int range = max - min + 1;
         int[] arrayOfNumbers = new int[n];

         for (int i = 0; i < n; i++) {
             int rand = (int) (Math.random() * range) + min;
             arrayOfNumbers[i] = rand;
         }
         return arrayOfNumbers;
     }

     public static boolean containsDuplicates(int[] arr) {

         for (int i = 0; i < arr.length; i++) {
             for (int x = i+1; x < arr.length; x++) {
                 if(arr[x] == arr[i]){
                     System.out.println(arr[x]);
                     return true;
                 }
             }

         }
         return false;
     }

     public  static  float averages(int[] arr){
         int total=0;
         for (int i=0;i< arr.length;i++){
             total = total+arr[i];
         }
         return (float) total/ arr.length;
     }

     public static int[] arrayOfArrays(int[][] arr){
         float[] total= new float[arr.length];
         for (int i=0 ;i< arr.length;i++){
             for (int x=0;x< arr[i].length;x++){
            total[i]=total[i]+arr[i][x];
             }
             total[i]=total[i]/arr[i].length;
         }
        int c=0;
         float k=total[0];

       for (int i=0;i< total.length;i++){
     if(k>total[i]){
         k=total[i];
      c = i;
     }
       }
         return arr[c];
     }
 }



